// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mynteye.djinni

package com.slightech.mynteye;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface Device {
    @NonNull
    public ArrayList<StreamRequest> getStreamRequests();

    public void configStreamRequest(@NonNull StreamRequest request);

    public void start();

    public void stop();

    @NonNull
    public static ArrayList<DeviceUsbInfo> query()
    {
        return CppProxy.query();
    }

    @Nullable
    public static Device create(@NonNull DeviceUsbInfo info)
    {
        return CppProxy.create(info);
    }

    static final class CppProxy implements Device
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public ArrayList<StreamRequest> getStreamRequests()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStreamRequests(this.nativeRef);
        }
        private native ArrayList<StreamRequest> native_getStreamRequests(long _nativeRef);

        @Override
        public void configStreamRequest(StreamRequest request)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_configStreamRequest(this.nativeRef, request);
        }
        private native void native_configStreamRequest(long _nativeRef, StreamRequest request);

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);

        @NonNull
        public static native ArrayList<DeviceUsbInfo> query();

        @Nullable
        public static native Device create(@NonNull DeviceUsbInfo info);
    }
}
