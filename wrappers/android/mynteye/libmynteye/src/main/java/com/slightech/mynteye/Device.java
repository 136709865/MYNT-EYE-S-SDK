// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mynteye.djinni

package com.slightech.mynteye;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

/** Device class to communicate with MYNTÂ® EYE device */
public interface Device {
    /** Get all stream requests */
    @NonNull
    public ArrayList<com.slightech.mynteye.StreamRequest> getStreamRequests();

    /** Config the stream request */
    public void configStreamRequest(@NonNull com.slightech.mynteye.StreamRequest request);

    /** Start capturing the source */
    public void start(@NonNull com.slightech.mynteye.Source source);

    /** Stop capturing the source */
    public void stop(@NonNull com.slightech.mynteye.Source source);

    /** Wait the streams are ready */
    public void waitForStreams();

    /** Get the latest data of stream */
    @Nullable
    public com.slightech.mynteye.StreamData getStreamData(@NonNull com.slightech.mynteye.Stream stream);

    /** Get the datas of stream */
    @NonNull
    public ArrayList<com.slightech.mynteye.StreamData> getStreamDatas(@NonNull com.slightech.mynteye.Stream stream);

    /** Enable cache motion datas */
    public void enableCacheMotionDatas(int maxSize);

    /** Get the motion datas */
    @NonNull
    public ArrayList<com.slightech.mynteye.MotionData> getMotionDatas();

    /** Query devices */
    @NonNull
    public static ArrayList<com.slightech.mynteye.DeviceUsbInfo> query()
    {
        return CppProxy.query();
    }

    /** Create the device instance */
    @Nullable
    public static Device create(@NonNull com.slightech.mynteye.DeviceUsbInfo info)
    {
        return CppProxy.create(info);
    }

    static final class CppProxy implements Device
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public ArrayList<com.slightech.mynteye.StreamRequest> getStreamRequests()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStreamRequests(this.nativeRef);
        }
        private native ArrayList<com.slightech.mynteye.StreamRequest> native_getStreamRequests(long _nativeRef);

        @Override
        public void configStreamRequest(com.slightech.mynteye.StreamRequest request)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_configStreamRequest(this.nativeRef, request);
        }
        private native void native_configStreamRequest(long _nativeRef, com.slightech.mynteye.StreamRequest request);

        @Override
        public void start(com.slightech.mynteye.Source source)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef, source);
        }
        private native void native_start(long _nativeRef, com.slightech.mynteye.Source source);

        @Override
        public void stop(com.slightech.mynteye.Source source)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef, source);
        }
        private native void native_stop(long _nativeRef, com.slightech.mynteye.Source source);

        @Override
        public void waitForStreams()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_waitForStreams(this.nativeRef);
        }
        private native void native_waitForStreams(long _nativeRef);

        @Override
        public com.slightech.mynteye.StreamData getStreamData(com.slightech.mynteye.Stream stream)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStreamData(this.nativeRef, stream);
        }
        private native com.slightech.mynteye.StreamData native_getStreamData(long _nativeRef, com.slightech.mynteye.Stream stream);

        @Override
        public ArrayList<com.slightech.mynteye.StreamData> getStreamDatas(com.slightech.mynteye.Stream stream)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStreamDatas(this.nativeRef, stream);
        }
        private native ArrayList<com.slightech.mynteye.StreamData> native_getStreamDatas(long _nativeRef, com.slightech.mynteye.Stream stream);

        @Override
        public void enableCacheMotionDatas(int maxSize)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_enableCacheMotionDatas(this.nativeRef, maxSize);
        }
        private native void native_enableCacheMotionDatas(long _nativeRef, int maxSize);

        @Override
        public ArrayList<com.slightech.mynteye.MotionData> getMotionDatas()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMotionDatas(this.nativeRef);
        }
        private native ArrayList<com.slightech.mynteye.MotionData> native_getMotionDatas(long _nativeRef);

        @NonNull
        public static native ArrayList<com.slightech.mynteye.DeviceUsbInfo> query();

        @Nullable
        public static native Device create(@NonNull com.slightech.mynteye.DeviceUsbInfo info);
    }
}
